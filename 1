//
// breakout.c
//
// Computer Science 50
// Problem Set 4
//
 
// standard libraries
#define _XOPEN_SOURCE
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
 
// Stanford Portable Library
#include "gevents.h"
#include "gobjects.h"
#include "gwindow.h"
 
// height and width of game's window in pixels
#define HEIGHT 600
#define WIDTH 400
 
// height and width of game's paddle
#define PADDLEWIDTH 70
#define PADDLEHEIGHT 12
#define YPADDLELOCAT 550
#define XPADDLELOCAT 200 - (PADDLEWIDTH/2)
 
// number of rows of bricks
#define ROWS 5
 
// number of columns of bricks
#define COLS 10
 
// radius of ball in pixels
#define RADIUS 10
 
// lives
#define LIVES 3
 
// prototypes
void initBricks(GWindow window);
GOval initBall(GWindow window);
GRect initPaddle(GWindow window);
GLabel initScoreboard(GWindow window);
void updateScoreboard(GWindow window, GLabel label, int points);
GObject detectCollision(GWindow window, GOval ball);
 
int main(void)
{
    // seed pseudorandom number generator
    srand48(time(NULL));
 
    // instantiate window
    GWindow window = newGWindow(WIDTH, HEIGHT);
 
    // instantiate bricks
    initBricks(window);
 
    // instantiate ball, centered in middle of window
    GOval ball = initBall(window);
 
    // instantiate paddle, centered at bottom of window
    GRect paddle = initPaddle(window);
 
    // instantiate scoreboard, centered in middle of window, just above ball
    GLabel label = initScoreboard(window);
 
    // number of bricks initially
    int bricks = COLS * ROWS;
 
    // number of lives initially
    int lives = LIVES;
 
    // number of points initially
    int points = 0;
 
    // keep playing until game over
    while (lives > 0 && bricks > 0)
    {
        // TODO
        
        double velocityX = drand48(); //TODO mulitply for some constant to make the ball faster
        double velocityY= 2.0;
        
        while(true)
       {
            GEvent event = getNextEvent(MOUSE_EVENT);
            if(event != NULL)
            {
                if (getEventType(event) == MOUSE_MOVED)
                {
                    double x = getX(event)- getWidth(paddle)/2;
                    setLocation(paddle,x, YPADDLELOCAT);
                }
            }
            
        //bouncing ball
        move(ball, velocityX, velocityY);
        
        if(getX(ball) + getWidth(ball) >= getWidth(window))
        {
            velocityX = -velocityX;
            
        }else if(getX(ball) <= 0)
            {
                velocityX = -velocityX;
            }
            if(getY(ball) + getHeight(ball) >= getHeight(window))
            {
                velocityY = - velocityY;
                
            }else if(getY(ball) <= 0)
                {
                    velocityY = - velocityY;
                }   
                //TODO the corner bounce
                
            pause(10);
            
            //deteching collision
            GObject object = detectCollision(window, ball);
            if(object == paddle)
            {
               velocityY = - velocityY;
               
               
            }else if(object != NULL && (strcmp(getType(object), "GRect") == 0))
            {
                velocityY = -velocityY; 
                removeGWindow(window, object);  
                points = points +1; 
                updateScoreboard(window, label, points);  
            }
            /*
            else if(strcmp(getType(object), "GLabel") == 0)
            {
                //TODO
            }
            */
            
            if(getY(ball)+ getHeight(ball)>= getHeight(window))
            {
             
               lives--; 
               double x = getWidth(window)/2 - getWidth(ball)/2;
               double y = getHeight(window)/2 + getHeight(ball)/2;
               setLocation(ball,x,y);
               setLocation(paddle, 200 - (PADDLEWIDTH/2), YPADDLELOCAT);
               waitForClick();
            }
            
            if(lives <= 0 || bricks <= 0)
            {
                
                return 1;
            }
        
        
        }
       
    }
 
    // wait for click before exiting
    waitForClick();
 
    // game over
    closeGWindow(window);
    return 0;
}
 
/**
 * Initializes window with a grid of bricks.
 */
void initBricks(GWindow window)
{
    double xLocation = 2;
    double yLocation = 45;
    double numGap = COLS + 1 ;
    double brickWidth = ((getWidth(window)-(numGap * 4))/COLS);
    
    
    // TODO
    for(int i = 0; i < ROWS; i++)
    {
    
         for(int j = 0; j < COLS; j++)
         {
         GRect rect = newGRect(xLocation, yLocation, brickWidth , PADDLEHEIGHT);
            setFilled(rect, true);
            setColor(rect, "RED");
            add(window, rect);
            
            xLocation = xLocation + brickWidth + 4 ;
             
            
         }         
          xLocation = 2;
          yLocation = (yLocation + PADDLEHEIGHT) + 4;
    }
    
}
 
/**
 * Instantiates ball in center of window.  Returns ball.
 */
GOval initBall(GWindow window)
{
    // TODO
    
    GOval ball = newGOval(getWidth(window)/2 - 11, getHeight(window)/2, 22, 22);
    setFilled(ball, true);
    setColor(ball, "BLACK");
    add(window, ball);
    return ball;
}
 
/**
 * Instantiates paddle in bottom-middle of window.
 */
GRect initPaddle(GWindow window)
{
    // TODO
    //initialize the paddle
    GRect paddle = newGRect(XPADDLELOCAT,YPADDLELOCAT,PADDLEWIDTH ,PADDLEHEIGHT);
    setFilled(paddle, true);
    setColor(paddle,"YELLOW");
    add(window, paddle);
    return paddle;
}
 
/**
 * Instantiates, configures, and returns label for scoreboard.
 */
GLabel initScoreboard(GWindow window)
{
    // TODO
    
    GLabel label = newGLabel("0");
    
    double  x = getWidth(window)/2 - getWidth(label)/2;
    double y = getHeight(window)/2 + getHeight(label)/2;
    setLocation(label, x, y);
    add(window, label);
    
    return label;
}
 
/**
 * Updates scoreboard's label, keeping it centered in window.
 */
void updateScoreboard(GWindow window, GLabel label, int points)
{
    // update label
    char s[12];
    sprintf(s, "%i", points);
    setLabel(label, s);
 
    // center label in window
    double x = (getWidth(window) - getWidth(label)) / 2;
    double y = (getHeight(window) - getHeight(label)) / 2;
    setLocation(label, x, y);
}
 
/**
 * Detects whether ball has collided with some object in window
 * by checking the four corners of its bounding box (which are
 * outside the ball's GOval, and so the ball can't collide with
 * itself).  Returns object if so, else NULL.
 */
GObject detectCollision(GWindow window, GOval ball)
{
    // ball's location
    double x = getX(ball);
    double y = getY(ball);
 
    // for checking for collisions
    GObject object;
 
    // check for collision at ball's top-left corner
    object = getGObjectAt(window, x, y);
    if (object != NULL)
    {
        return object;
    }
 
    // check for collision at ball's top-right corner
    object = getGObjectAt(window, x + 2 * RADIUS, y);
    if (object != NULL)
    {
        return object;
    }
 
    // check for collision at ball's bottom-left corner
    object = getGObjectAt(window, x, y + 2 * RADIUS);
    if (object != NULL)
    {
        return object;
    }
 
    // check for collision at ball's bottom-right corner
    object = getGObjectAt(window, x + 2 * RADIUS, y + 2 * RADIUS);
    if (object != NULL)
    {
        return object;
    }
 
    // no collision
    return NULL;
}

Write Preview Parsed as Markdown  Edit in fullscreen

Comment
Status API Blog About Â© 2014 GitHub, Inc. Terms Privacy Security Contact 
